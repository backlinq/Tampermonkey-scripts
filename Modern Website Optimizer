// ==UserScript==
// @name         Modern Website Optimizer
// @namespace    http://tampermonkey.net/
// @version      2.1
// @description  Safe decluttering for faster loading and reduced resource usage
// @author       YourName
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // whitelist
    const whitelist = [
        'youtube.com',
        'docs.google.com',
        'mail.google.com',
        'github.com'
    ];

    // Check if current domain is whitelisted
    if (whitelist.some(domain => location.hostname.includes(domain))) {
        return;
    }

    let cleanupCount = 0;

    // Much safer element removal
    function safeRemoveElement(element) {
        if (!element || !element.parentNode) return false;

        try {
            // Don't remove critical form elements
            if (element.matches('input, textarea, select, button, [role="search"]')) {
                return false;
            }

            element.remove();
            return true;
        } catch (error) {
            return false;
        }
    }

    // Much more conservative overlay detection
    function detectProblematicOverlays() {
        const candidates = [];

        // Only target very specific problematic elements
        const overlaySelectors = [
            'div[class*="overlay"]',
            'div[class*="popup"]',
            'div[class*="modal"]',
            'div[class*="lightbox"]',
            '[id*="popup"]',
            '[id*="modal"]'
        ];

        overlaySelectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => {
                if (el.closest('body')) {
                    const style = window.getComputedStyle(el);
                    const rect = el.getBoundingClientRect();

                    // Only remove if it's fixed AND covers most of the screen
                    const isTrulyObstructive = (
                        style.position === 'fixed' &&
                        rect.width > window.innerWidth * 0.7 &&
                        rect.height > window.innerHeight * 0.7
                    );

                    if (isTrulyObstructive) {
                        candidates.push(el);
                    }
                }
            });
        });

        return candidates;
    }

    // Media management (same as before but safer)
    function manageMediaElements() {
        document.querySelectorAll('video, audio').forEach(media => {
            if (!media.paused && !media.controls) {
                media.pause();
                media.currentTime = 0;
            }
        });
    }

    // Ad removal (same as original)
    function removeAdContent() {
        document.querySelectorAll('iframe').forEach(el => {
            if (/doubleclick|adservice|googleads/.test(el.src)) {
                safeRemoveElement(el);
            }
        });
    }

    // Animation optimization (same as original)
    function optimizeAnimations() {
        if (!document.getElementById('tm-optimize-style')) {
            const style = document.createElement('style');
            style.id = 'tm-optimize-style';
            style.textContent = `
                * {
                    animation-duration: 0.001s !important;
                    transition-duration: 0.001s !important;
                }
            `;
            document.head.appendChild(style);
        }
    }

    // Main cleanup function
    function performCleanup() {
        if (cleanupCount > 5) return; // Only run a few times

        cleanupCount++;

        // Remove only truly obstructive overlays
        const overlays = detectProblematicOverlays();
        overlays.forEach(element => {
            safeRemoveElement(element);
        });

        // Media control
        manageMediaElements();

        // Ad removal
        removeAdContent();

        // Only apply animation optimization once
        if (cleanupCount === 1) {
            optimizeAnimations();
        }
    }

    // Initialize
    function init() {
        // Run after DOM is loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                setTimeout(performCleanup, 1000);
            });
        } else {
            setTimeout(performCleanup, 1000);
        }

        // Limited periodic cleanup
        setTimeout(performCleanup, 3000);
        setTimeout(performCleanup, 6000);
    }

    init();
})();
